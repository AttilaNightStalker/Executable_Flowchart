/*globals define, WebGMEGlobal*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Nov 29 2019 18:07:44 GMT-0600 (CST).
 */

define([
    'js/Constants',
    'js/Utils/GMEConcepts',
    'js/NodePropertyNames'
], function (
    CONSTANTS,
    GMEConcepts,
    nodePropertyNames
) {

    'use strict';

    function FlowChartVizControl(options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();
        
        this._logger.debug('ctor finished');
    }

    FlowChartVizControl.prototype._initWidgetEventHandlers = function () {
        this._widget.onNodeClick = function (id) {
            // Change the current active object
            WebGMEGlobal.State.registerActiveObject(id);
        };
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    FlowChartVizControl.prototype.selectedObjectChanged = function (nodeId) {

        console.log("FlowChartVizControl.prototype.selectedObjectChanged");
        console.log(nodeId)

        var desc = this._getObjectDescriptor(nodeId),
            self = this;

        self._logger.debug('activeObject nodeId \'' + nodeId + '\'');

        // Remove current territory patterns
        if (self._currentNodeId) {
            self._client.removeUI(self._territoryId);
        }

        self._currentNodeId = nodeId;
        self._currentNodeParentId = undefined;

        if (typeof self._currentNodeId === 'string') {
            // Put new node's info into territory rules
            self._selfPatterns = {};
            self._selfPatterns[nodeId] = {children: 0};  // Territory "rule"

            self._widget.setTitle(desc.name.toUpperCase());

            if (typeof desc.parentId === 'string') {
                self.$btnModelHierarchyUp.show();
            } else {
                self.$btnModelHierarchyUp.hide();
            }

            self._currentNodeParentId = desc.parentId;

            self._territoryId = self._client.addUI(self, function (events) {
                self._eventCallback(events);
            });

            // Update the territory
            self._client.updateTerritory(self._territoryId, self._selfPatterns);

            self._selfPatterns[nodeId] = {children: 1};
            self._client.updateTerritory(self._territoryId, self._selfPatterns);
        }
    };

    // This next function retrieves the relevant node information for the widget
    FlowChartVizControl.prototype._getObjectDescriptor = function (nodeId) {
        var node = this._client.getNode(nodeId),
            objDescriptor;
        if (node) {
            objDescriptor = {
                id: node.getId(),
                name: node.getAttribute(nodePropertyNames.Attributes.name),
                childrenIds: node.getChildrenIds(),
                parentId: node.getParentId(),
                isConnection: GMEConcepts.isConnection(nodeId)
            };
        }

        // console.log(node.getRegistry('position'));
        return objDescriptor;
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    FlowChartVizControl.prototype._eventCallback = function (events) {

        console.log("FlowChartVizControl.prototype._eventCallback");
        console.log(events);

        var i = events ? events.length : 0,
            event;

        this._logger.debug('_eventCallback \'' + i + '\' items');
        console.log('_eventCallback \'' + i + '\' items');

        while (i--) {
            event = events[i];
            switch (event.etype) {

            case CONSTANTS.TERRITORY_EVENT_LOAD:
                this._onLoad(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UPDATE:
                this._onUpdate(event.eid);
                break;
            case CONSTANTS.TERRITORY_EVENT_UNLOAD:
                this._onUnload(event.eid);
                break;
            case 'complete':
                console.log(event);
                this._buildChart();
            default:
                break;
            }
        }

        this._logger.debug('_eventCallback \'' + events.length + '\' items - DONE');
    };

    FlowChartVizControl.prototype._onLoad = function (gmeId) {

        console.log("FlowChartVizControl.prototype._onLoad");
        console.log(gmeId);

        var description = this._getObjectDescriptor(gmeId);
        this._widget.addNode(description);
    };

    FlowChartVizControl.prototype._onUpdate = function (gmeId) {
        var description = this._getObjectDescriptor(gmeId);
        this._widget.updateNode(description);
    };

    FlowChartVizControl.prototype._onUnload = function (gmeId) {
        this._widget.removeNode(gmeId);
    };

    FlowChartVizControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    FlowChartVizControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    FlowChartVizControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    FlowChartVizControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    FlowChartVizControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId, {suppressVisualizerFromNode: true});
        }
    };

    FlowChartVizControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    FlowChartVizControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    FlowChartVizControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    FlowChartVizControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    FlowChartVizControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        /************** Go to hierarchical parent button ****************/
        this.$btnModelHierarchyUp = toolBar.addButton({
            title: 'Go to parent',
            icon: 'glyphicon glyphicon-circle-arrow-up',
            clickFn: function (/*data*/) {
                WebGMEGlobal.State.registerActiveObject(self._currentNodeParentId);
            }
        });
        this._toolbarItems.push(this.$btnModelHierarchyUp);
        this.$btnModelHierarchyUp.hide();

        /************** Checkbox example *******************/

        this.$cbShowConnection = toolBar.addCheckBox({
            title: 'toggle checkbox',
            icon: 'gme icon-gme_diagonal-arrow',
            checkChangedFn: function (data, checked) {
                self._logger.debug('Checkbox has been clicked!');
            }
        });
        this._toolbarItems.push(this.$cbShowConnection);

        this._toolbarInitialized = true;
    };

/******************************************************************************* */
/* my own functions
/******************************************************************************* */

    FlowChartVizControl.prototype._buildChart = function () {
        console.log("### building chart");
        const self = this;
        const allMetaNodesArray = this._client.getAllMetaNodes();

        let curNode = this._client.getNode(this._currentNodeId);
        // console.log(curNode);

        let MetaName2Id = {};
        let MetaId2Name = {};
        allMetaNodesArray.forEach(function(metaNode){
            MetaName2Id[metaNode.getAttribute('name')] = metaNode.getId();
            MetaId2Name[metaNode.getId()] = metaNode.getAttribute('name');
        });

        try {
            if (curNode.isTypeOf(MetaName2Id['ExecutableFlowChart'])) {
                console.log('correct type for FlowChart Viz');
            }
            else {
                console.log('wrong type for Flowchart Viz, id=', curNode.getMetaTypeId());
                return;
            }
        }
        catch(err) {
            console.log(err);
            return;
        }

        let childrenIds = curNode.getChildrenIds();
        let nodesInfo = {}
        let varInfo = {}
        let varNameMap = {}

        childrenIds.forEach(function(childId){
            let child = self._client.getNode(childId);
            
            if (child.isTypeOf(MetaName2Id['Transition'])) {
                let src = child.getPointerId('src');
                let dst = child.getPointerId('dst');
                
                if (!(src in nodesInfo)) {
                    let srcNode = self._client.getNode(src);
                    nodesInfo[src] = { 
                        name: srcNode.getAttribute('name'), 
                        position: srcNode.getRegistry('position'),
                        type: MetaId2Name[srcNode.getMetaTypeId()], 
                        inFlow: [], outFlow: []};
                }
                if (!(dst in nodesInfo)) {
                    let dstNode = self._client.getNode(dst);
                    nodesInfo[dst] = {
                        name: dstNode.getAttribute('name'), 
                        position: dstNode.getRegistry('position'),
                        type: MetaId2Name[dstNode.getMetaTypeId()], 
                        inFlow: [], outFlow: []};
                }

                nodesInfo[src].outFlow.push({id: dst, type: MetaId2Name[child.getMetaTypeId()]});
                nodesInfo[dst].inFlow.push({id: src, type: MetaId2Name[child.getMetaTypeId()]});
            }

            else if (child.isTypeOf(MetaName2Id['Node'])) {
                if (!(childId in nodesInfo)) {
                    nodesInfo[childId] = {
                        name: child.getAttribute('name'), 
                        position: child.getRegistry('position'),
                        type: MetaId2Name[child.getMetaTypeId()], 
                        inFlow: [], outFlow: []};
                    
                    switch (nodesInfo[childId].type) {
                        case 'Process':
                            nodesInfo[childId].statements = child.getAttribute('statements');
                            break;
                        case 'Decision':
                            nodesInfo[childId].expression = child.getAttribute('expression');
                        case 'Input':
                            break;
                        case 'Output':
                            nodesInfo[childId].comment = child.getAttribute('comment');
                            break;
                        case 'End':
                            nodesInfo[childId].comment = child.getAttribute('comment');
                            break;
                        default:
                            console.error("invalid childId=" + childId);
                    }
                }
            }

            else if (child.isTypeOf(MetaName2Id['Variable'])) {
                let varName = child.getAttribute('name');

                varInfo[childId] = {
                    name: varName,
                    type: MetaId2Name[child.getMetaTypeId()],
                    value: child.getAttribute('value')
                }

                if (varName in varNameMap) {
                    console.log("conflict names", varName);
                }
                varNameMap[varName] = childId;
            }

        });
        
        var errorMsg = this._checkValidity(nodesInfo, varInfo);

        if (errorMsg.length > 0) {
            console.log("error msg: " + errorMsg);
        }
        else {
            console.log("correct chart!");
        }

        this._widget.renderChart(nodesInfo, varInfo, varNameMap);
    }

    FlowChartVizControl.prototype._checkValidity = function(nodesInfo, varInfo) {
        var haveStart = false;
        var errorMsg = [];

        for (var id in nodesInfo) {
            var nodeInfo = nodesInfo[id];

            switch(nodeInfo.type) {

                case 'Start':
                    if (haveStart == true) {
                        errorMsg.push("multiple starts");
                    }
                    haveStart = true;

                    if (nodeInfo.outFlow.length > 1) {
                        errorMsg.push("multiple branches for start with id=" + id);
                    }
                    else if (nodeInfo.outFlow.length < 1) {
                        errorMsg.push("No out flow for start with id=" + id);
                    }
                    break;

                case 'Process':
                    if (nodeInfo.inFlow.length < 1) {
                        errorMsg.push("No in flow for Process with name=" + nodeInfo.name + " and id=" + id);
                    }
                        
                    if (nodeInfo.outFlow.length < 1) {
                        errorMsg.push("No out flow for Process with name=" + nodeInfo.name + " and id=" + id);
                    }
                    else if (nodeInfo.outFlow.length > 1) {
                        errorMsg.push("multiple out flow for Process with name=" + nodeInfo.name + "and id=" + id);
                    }

                    nodeInfo.func = this._getStatements(nodeInfo.statements, varInfo);

                    break;

                case 'Decision':

                    if (nodeInfo.inFlow.length < 1) {
                        errorMsg.push("No in flow for Decision with name=" + nodeInfo.name + " and id=" + id);
                    }

                    if (nodeInfo.outFlow.length < 2) {
                        errorMsg.push("Not enough out flow for Decision with name=" + nodeInfo.name + " and id=" + id);
                    }
                    else if (nodeInfo.outFlow.length > 2) {
                        errorMsg.push("Too many out flows for Decision with name=" + nodeInfo.name + " and id=" + id);
                    }
                    else if (nodeInfo.outFlow[0].type == nodeInfo.outFlow[1].type) {
                        errorMsg.push("There must be 2 different out flow for Decision with name=" + nodeInfo.name + " and id=" + id);
                    }
                    else if (nodeInfo.outFlow[0].type == 'PositiveTrans') {
                        let temp = nodeInfo.outFlow[0];
                        nodeInfo.outFlow[0] = nodeInfo.outFlow[1];
                        nodeInfo.outFlow[1] = temp;
                    }

                    nodeInfo.func = this._getExpression(nodeInfo.expression, varInfo);
                    break;

            }
        }

        return errorMsg;
    }

    FlowChartVizControl.prototype._getStatements = function (funcString, varInfo) {
        if (!funcString) {
            funcString = '';
        }
        var params = '';
        var retVal = '';
        for (var id in varInfo) {
            if (params == '') {
                params = varInfo[id].name;
            }
            else {
                params += ',' + varInfo[id].name;
            }

            if (retVal == '') {
                retVal = "{'" + varInfo[id].name + "':" + varInfo[id].name;
            }
            else {
                retVal += ",'" + varInfo[id].name + "':" + varInfo[id].name;
            }
        }
        retVal += '}';

        var funcBody = 'function(';
        funcBody += params + "){\n" + funcString + "return " + retVal + ";\n}";

        console.log(funcBody);


        var userFunc;
        try {
            eval("userFunc = " + funcBody);
            console.log(userFunc);
            return userFunc;
        }
        catch(err) {
            console.log(err);
            return null;
        }
    }


    FlowChartVizControl.prototype._getExpression = function (funcString, varInfo) {
        if (!funcString || funcString == '') {
            funcString = 'false';
        }

        var params = '';
        var retVal = '';
        for (var id in varInfo) {
            if (params == '') {
                params = varInfo[id].name;
            }
            else {
                params += ',' + varInfo[id].name;
            }

        }

        var funcBody = 'function(';
        funcBody += params + "){\n" + "return " + funcString + ";\n}";

        console.log("exp", funcBody);


        var userFunc;
        try {
            eval("userFunc = " + funcBody);
            console.log(userFunc);
            return userFunc;
        }
        catch(err) {
            console.log(err);
            return null;
        }
    }
/******************************************************************************* */
    return FlowChartVizControl;
});
